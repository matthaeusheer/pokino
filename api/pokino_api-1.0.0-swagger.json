{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "Internal API specification for the pokino application.",
    "version" : "1.0.0",
    "title" : "Pokino API",
    "contact" : {
      "email" : "matthaeusheer@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "game",
    "description" : "The game managing endpoints for initialisation and game play."
  }, {
    "name" : "pokemon",
    "description" : "Functionality to query Pokémon data"
  }, {
    "name" : "weather",
    "description" : "Exposes the internal weather API"
  }, {
    "name" : "leaderboard",
    "description" : "Retrieve leaderboard data from past games"
  } ],
  "paths" : {
    "/leaderboard" : {
      "get" : {
        "tags" : [ "leaderboard" ],
        "summary" : "Get the leaderboard for top players.",
        "description" : "Will generate leaderboard data and statistics accumulated from all past games played.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "topNPlayers",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Leaderboard data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Leaderboard"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/game/login" : {
      "post" : {
        "tags" : [ "game" ],
        "summary" : "Login as a new player onto the platform.",
        "description" : "Choose a name and login. You will be assigned a unique ID.",
        "parameters" : [ {
          "in" : "query",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A new player has been logged in and will return unique player id.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string",
                  "example" : 42
                }
              }
            }
          },
          "403" : {
            "description" : "The player name is already taken or maximum number of players reached."
          }
        }
      }
    },
    "/game/clickReady" : {
      "post" : {
        "tags" : [ "game" ],
        "summary" : "Go from waiting room lobby to player ready to be matched to opponents.",
        "description" : "Will be matche to opponents from now on.",
        "parameters" : [ {
          "in" : "query",
          "name" : "playerName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "playerid",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A new player has been logged in and will return unique player id."
          },
          "403" : {
            "description" : "The player name is already taken or maximum number of players reached."
          }
        }
      }
    },
    "/game/pointsNeededToWin" : {
      "get" : {
        "tags" : [ "game" ],
        "summary" : "How many points does a player need to win a game?",
        "responses" : {
          "200" : {
            "description" : "A new player has been logged in and will return unique player id.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 42
                }
              }
            }
          }
        }
      }
    },
    "/game/ready" : {
      "post" : {
        "tags" : [ "game" ],
        "summary" : "Confirmation message from frontend after switching into game-play view.",
        "description" : "When both players sent the confirmation, the game play tream will start.",
        "parameters" : [ {
          "in" : "query",
          "name" : "gameId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The id of the starting player s.t. frontend can evaluate its own id against it.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string",
                  "example" : 1
                }
              }
            }
          }
        }
      }
    },
    "/game/ballThrown" : {
      "post" : {
        "tags" : [ "game" ],
        "summary" : "Inform backend that a ball has been thrown to switch turns.",
        "description" : "This will affect the game-specific state machine in the backend.",
        "parameters" : [ {
          "in" : "query",
          "name" : "playerId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "didHit",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Nothing."
          }
        }
      }
    },
    "/game/status" : {
      "get" : {
        "tags" : [ "game" ],
        "summary" : "Retrieve a list of all current games being played.",
        "description" : "Very handy for debugging the system state.\n",
        "responses" : {
          "200" : {
            "description" : "List of game statuses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GameStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pokemon/all" : {
      "get" : {
        "tags" : [ "pokemon" ],
        "summary" : "Get all Pokémon available.",
        "description" : "This will basically return all Pokemon available in the internal database.\n",
        "responses" : {
          "200" : {
            "description" : "Search results, list of all Pokémon.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pokemon"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pokemon/random" : {
      "get" : {
        "tags" : [ "pokemon" ],
        "summary" : "Get a random Pokémon.",
        "description" : "Returns a single Pokémon, possibly from a subset of Pokémon.",
        "responses" : {
          "200" : {
            "description" : "Single Pokémon.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/Pokemon"
                }
              }
            }
          }
        }
      }
    },
    "/weather" : {
      "get" : {
        "tags" : [ "weather" ],
        "summary" : "Returns the current weather via external API.",
        "responses" : {
          "200" : {
            "description" : "Weather object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/WeatherModel"
                }
              }
            }
          }
        }
      }
    },
    "/weather/random" : {
      "get" : {
        "tags" : [ "weather" ],
        "summary" : "Returns a simplified random weather object.",
        "responses" : {
          "200" : {
            "description" : "Simple Pokino weather object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/PokinoWeather"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "PokinoWeather" : {
        "type" : "object",
        "properties" : {
          "windSpeedKmh" : {
            "type" : "number",
            "example" : 10.5
          },
          "weatherType" : {
            "type" : "string",
            "example" : "cloudy"
          },
          "temperature" : {
            "type" : "number",
            "example" : 21.5
          }
        }
      },
      "Leaderboard" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/LeaderboardEntry"
        }
      },
      "LeaderboardEntry" : {
        "type" : "object",
        "properties" : {
          "playerName" : {
            "type" : "string",
            "example" : "Will Smith"
          },
          "gamesWon" : {
            "type" : "integer",
            "example" : 42
          },
          "gamesLost" : {
            "type" : "integer",
            "example" : 0
          },
          "numberOfPokeHits" : {
            "type" : "integer",
            "example" : 10
          },
          "numberOfPokeMisses" : {
            "type" : "integer",
            "example" : 5
          }
        }
      },
      "GameStatus" : {
        "type" : "object",
        "properties" : {
          "gameId" : {
            "type" : "String",
            "example" : 1
          },
          "players" : {
            "type" : "string",
            "example" : "Not so usable."
          },
          "standings" : {
            "type" : "string",
            "example" : {
              "1" : 4,
              "2" : 3
            }
          },
          "gameState" : {
            "type" : "string",
            "example" : "GAME_STATE_RUNNING"
          }
        }
      },
      "Pokemon" : {
        "type" : "object",
        "required" : [ "id", "pokeDexIdx", "name", "type1", "type2", "sumPoints", "healthPoints", "attackPoints", "defensePoints", "specialAttackPoints", "specialDefensePoints", "attackSpeed", "generation", "isLegendary" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 42
          },
          "pokeDexIdx" : {
            "type" : "integer",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "example" : "Pikachu"
          },
          "type1" : {
            "type" : "string",
            "example" : "Grass"
          },
          "type2" : {
            "type" : "string",
            "example" : "Poison"
          },
          "sumPoints" : {
            "type" : "integer",
            "example" : 100
          },
          "healthPoints" : {
            "type" : "integer",
            "example" : 100
          },
          "attackPoints" : {
            "type" : "integer",
            "example" : 100
          },
          "defensePoints" : {
            "type" : "integer",
            "example" : 100
          },
          "specialAttackPoints" : {
            "type" : "integer",
            "example" : 100
          },
          "specialDefensePoints" : {
            "type" : "integer",
            "example" : 100
          },
          "attackSpeed" : {
            "type" : "integer",
            "example" : 10
          },
          "generation" : {
            "type" : "integer",
            "example" : 10
          },
          "isLegendary" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "WeatherModel" : {
        "type" : "object",
        "properties" : {
          "coord" : {
            "$ref" : "#/components/schemas/Coord"
          },
          "weather" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Weather"
            },
            "description" : "(more info Weather condition codes)"
          },
          "base" : {
            "type" : "string",
            "description" : "Internal parameter",
            "example" : "cmc stations"
          },
          "main" : {
            "$ref" : "#/components/schemas/Main"
          },
          "visibility" : {
            "type" : "integer",
            "description" : "Visibility, meter",
            "example" : 16093
          },
          "wind" : {
            "$ref" : "#/components/schemas/Wind"
          },
          "clouds" : {
            "$ref" : "#/components/schemas/Clouds"
          },
          "rain" : {
            "$ref" : "#/components/schemas/Rain"
          },
          "snow" : {
            "$ref" : "#/components/schemas/Snow"
          },
          "dt" : {
            "type" : "integer",
            "description" : "Time of data calculation, unix, UTC",
            "format" : "int32",
            "example" : 1435658272
          },
          "sys" : {
            "$ref" : "#/components/schemas/Sys"
          },
          "id" : {
            "type" : "integer",
            "description" : "City ID",
            "format" : "int32",
            "example" : 2172797
          },
          "name" : {
            "type" : "string",
            "example" : "Cairns"
          },
          "cod" : {
            "type" : "integer",
            "description" : "Internal parameter",
            "format" : "int32",
            "example" : 200
          }
        }
      },
      "Coord" : {
        "title" : "Coord",
        "type" : "object",
        "properties" : {
          "lon" : {
            "type" : "number",
            "description" : "City geo location, longitude",
            "example" : 145.77
          },
          "lat" : {
            "type" : "number",
            "description" : "City geo location, latitude",
            "example" : -16.92
          }
        }
      },
      "Weather" : {
        "title" : "Weather",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Weather condition id",
            "format" : "int32",
            "example" : 803
          },
          "main" : {
            "type" : "string",
            "description" : "Group of weather parameters (Rain, Snow, Extreme etc.)",
            "example" : "Clouds"
          },
          "description" : {
            "type" : "string",
            "description" : "Weather condition within the group",
            "example" : "broken clouds"
          },
          "icon" : {
            "type" : "string",
            "description" : "Weather icon id",
            "example" : "04n"
          }
        }
      },
      "Main" : {
        "title" : "Main",
        "type" : "object",
        "properties" : {
          "temp" : {
            "type" : "number",
            "description" : "Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.",
            "example" : 293.25
          },
          "pressure" : {
            "type" : "integer",
            "description" : "Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa",
            "format" : "int32",
            "example" : 1019
          },
          "humidity" : {
            "type" : "integer",
            "description" : "Humidity, %",
            "format" : "int32",
            "example" : 83
          },
          "temp_min" : {
            "type" : "number",
            "description" : "Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.",
            "example" : 289.82
          },
          "temp_max" : {
            "type" : "number",
            "description" : "Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.",
            "example" : 295.37
          },
          "sea_level" : {
            "type" : "number",
            "description" : "Atmospheric pressure on the sea level, hPa",
            "example" : 984
          },
          "grnd_level" : {
            "type" : "number",
            "description" : "Atmospheric pressure on the ground level, hPa",
            "example" : 990
          }
        }
      },
      "Wind" : {
        "title" : "Wind",
        "type" : "object",
        "properties" : {
          "speed" : {
            "type" : "number",
            "description" : "Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour.",
            "example" : 5.1
          },
          "deg" : {
            "type" : "integer",
            "description" : "Wind direction, degrees (meteorological)",
            "format" : "int32",
            "example" : 150
          }
        }
      },
      "Clouds" : {
        "title" : "Clouds",
        "type" : "object",
        "properties" : {
          "all" : {
            "type" : "integer",
            "description" : "Cloudiness, %",
            "format" : "int32",
            "example" : 75
          }
        }
      },
      "Rain" : {
        "title" : "Rain",
        "type" : "object",
        "properties" : {
          "3h" : {
            "type" : "integer",
            "description" : "Rain volume for the last 3 hours",
            "format" : "int32",
            "example" : 3
          }
        }
      },
      "Snow" : {
        "title" : "Snow",
        "type" : "object",
        "properties" : {
          "3h" : {
            "type" : "number",
            "description" : "Snow volume for the last 3 hours",
            "example" : 6
          }
        }
      },
      "Sys" : {
        "title" : "Sys",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "integer",
            "description" : "Internal parameter",
            "format" : "int32",
            "example" : 1
          },
          "id" : {
            "type" : "integer",
            "description" : "Internal parameter",
            "format" : "int32",
            "example" : 8166
          },
          "message" : {
            "type" : "number",
            "description" : "Internal parameter",
            "example" : 0.0166
          },
          "country" : {
            "type" : "string",
            "description" : "Country code (GB, JP etc.)",
            "example" : "AU"
          },
          "sunrise" : {
            "type" : "integer",
            "description" : "Sunrise time, unix, UTC",
            "format" : "int32",
            "example" : 1435610796
          },
          "sunset" : {
            "type" : "integer",
            "description" : "Sunset time, unix, UTC",
            "format" : "int32",
            "example" : 1435650870
          }
        }
      }
    }
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/matthaeusheer/pokino_api/1.0.0"
  } ]
}